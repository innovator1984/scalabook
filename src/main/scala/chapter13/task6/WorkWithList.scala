package chapter13.task6

/**
  * Уаражнение 6 из главы 13
  */
object WorkWithList extends App {

  val list = List(1, 2, 3, 4, 5)

  /*
  * :\ равносильно методу foldRight, вызванному у list.
  * В качестве нулевого значени используется пустой спсок.
  * Для схлопывания используется функцмя :: (соединение головы
  * и хвоста списка)
  * Итого:
  * 5 :: List[Int]
  * 4 :: List(5)
  * 3 :: List(4,5)
  * 2 :: List(3,4,5)
  * 1 :: List(2,3,4,5) = List(1,2,3,4,5),
  * так как операция :: является правосторонней.
  * То есть в начала списка list добавляется пустой список.
  * В результате получается исходный список
  * */
  println((list :\ List[Int]()) (_ :: _))

  /*
  * /: равносльно методу foldLeft, вызванному у list.
  * В качестве нулевого значения используется пустой список.
  * Для схлопывания используется функция :+ (добавление элемента
  * в конец коллекции)
  * Итого:
  * List[Int] :+ 1
  * List(1) :+ 2
  * List(1,2) :+ 3
  * List(1,2,3) :+ 4
  * List(1,2,3,4) :+ 5 = List(1,2,3,4,5),
  * так как операция :+ является левосторонней.
  * То есть в конец лустого списка поодгому добавляются
  * все елементы из списка list
  * В резельтате получается исходный список
  * */
  println((List[Int]() /: list) (_ :+ _))

  println((list.reverse :\ List[Int]()) (_ +: _))

}
